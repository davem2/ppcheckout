Project Setup
----------------------------------------------------------------------
- Go to Project page
	- Read details and requirements
	- Read the project forum page and note issues raised by proofers
	- Download project file(s) page scans, illustrations, proofed text
- Create project folder
	- Duplicate template project (NEW_PROJECT_TEMPLATE) and name it based on book title. Template project contains the following
		originals/* - Projects files downloaded from PGDP go here (proofed text, good/bad word lists, hi res illustrations)
		pngs/ - Book page scans downloaded from project
		images/ - Processed versions of illustrations used in HTML version go here
		todo.txt - Prepopulated checklist of standard tasks remaining to complete. Remove tasks from file once completed or add new tasks/reminders as needed.
		notes.txt - TDB.. may not be needed.. TN notes?
- Move project zip files into project/originals
- Unzip files
	- Unzip all project files into project/originals
	- Move files into appropriate directories
- Copy proofed text from originals to project_root/projectname-src.txt
- Update PROJECTNAME in Makefile
- Set up version control for project
	- git init
	- git add projectname-src.txt
	- git commit -m "Initial version"


Illustrations - First pass
----------------------------------------------------------------------
- If needed, rename illustrations to i_NNN[ab..] format where NNN is the scan page number. Multiple illustrations per page are named i_NNNa, i_NNNb, ...
- Convert illustrations to .png (or some other lossless format, .tif? .psd?)
	- mogrify -format png *.jpg
- Clean up master illustrations
	- Make background white (where applicable)
	- Crop extra space
    - Break up multi-illustration pages into seperate images (where applicable), use i_NNNa, i_NNNb... naming convention
	- Remove Fig. text (where applicable)
	- Do not scale images at this point


Main Processing
----------------------------------------------------------------------
- Convert file to UTF-8 encoding
- Switch to Unix style line endings
git commit -am "Convert to UTF-8"


- Check for formatting issues
    - Use dp2ppgen for quick check
    - Skim over book looking for any possible issues
	- Remove extra blank lines in frontmatter, one blank line max


- Resolve proofer comments marked with "[**"
git commit -am "Resolve [** issues flagged during proofing rounds"


- Fix up page seperators and blank pages
    - Using dp2ppgen
        - dp2ppgen book-src.txt -p book-src.txt
        - Set page numbering to match original
            - Add .pn i, .pn 1 statements where needed
    - Manually
        - Fixup page seperators:
              search for  : ^-----File: (\d+\.png).*
              replace with: // \1
        - Remove blank pages
              search for  : [Blank Page]
              replace with: // [Blank Page]
        - Add page numbers
              search for  : // (\d{3,4}.png)
              replace with: // \1\r\n.pn +1
	       or
              replace with: .bn \1\r\n.pn +1
              Set starting pages .pn i or .pn 1
git commit -am "Add page numbering, comment out [Blank Page]'s"


- Process Greek and Diacritics
    - Greek
	- search for \[[^FISB]
	- First, unless you are a scholar in ancient Greek, post links to your original page and also copies of what your proofers and formatters came up with [http://www.pgdp.net/phpBB2/viewtopic.php?t=15744: here] or [http://www.pgdp.net/phpBB2/viewtopic.php?t=16124: here]. Within a few hours Greek scholars will give you any corrections or tell you it is all just perfect!
	- use .gk directive in ppgen
    - Diacritic markup (e.g. [)a] for a with breve)
	- use .cv directive in ppgen
	    - for custom diacritics use:
		.cv in=[invalue] out=outvalue
git commit -am "Process Greek and diacritics"


- Replace characters with UTF-8
    - using dp2ppgen
	dp2ppgen book-src.txt --utf8
    - Replace "--" with "—" verify usage during search/replace
    - Fractions?
	search for  : \d+ ?\/ ?\d+
	- http://symbolcodes.tlt.psu.edu/bylanguage/mathchart.html
    - Do the same for [oe] to œ, [OE] or [Oe] to Œ, asterisms (⁂), and any other odd symbols.
	- http://www.fileformat.info/info/unicode/
	- http://shapecatcher.com/
    - If there are ditto marks proofed as double quotes, change them to „
    - Other special characters, foreign languages
git commit -am "Replace characters with UTF-8"


- Convert to single and double quotes to curly quotes
	- ppsmq -i book-src.txt -o book-src2.txt
	- Edit book-src2.txt resolve @ marked issues, and any unconverted single/double quotes (commonly opening single quote and apostrophized words like ’till)
		- Search for @, ", ', ∯, ∮
		  [@"'∯∮]
		- Curly quote reference
		  ‘ left single quotation mark
		  ’ left single quotation mark (used as apostrophy too)(’Tis, ’till)
		  “ left double quotation mark
		  ” left double quotation mark
		  [‘’“”]
	- Quotes inside HTML tags (should not be many at this early stage in PP) will have been mapped like this: single quotes became ∮ and double quotes became ∯ characters. Change them back to ' and "
	- Quotes inside ppgen dot commands (should not be many at this early stage in PP). Change them back to ' and "
	- Copy changes from book-src2.txt back to original book-src.txt
git commit -am "Change to curly quotes"


- Add nonbreaking spaces where appropriate
    - search for  : (A\. D\.|B\. C\.|U\. S\.|i\. e\.)
		or: (\W[A-Za-z]\.) ([A-Za-z]\.)
    - replace with: A.\\ D. etc..
		or: \1\\ \2
    - etc.. add more to regex above as you find them (maybe add to dp2ppgen one day?)
    - Look for acronyms with missing space
	- search for  : (A\.D\.|B\.C\.|U\.S\.|i\.e\.)
git commit -am "Add nonbreaking spaces"


- Markup chapter headings
    - dp2ppgen method ------------------------------
        - Run a dry run and verify heading outline looks correct
            - dp2ppgen book-src.txt -cd
        - If outline looks good run for real (if there are a couple issues run with -k and manually choose from original/generated)
            - dp2ppgen book-src.txt -c
        - Search for dp2ppgen comments
            - Double check chapter headings were flagged correctly
            - Remove original/generated version as needed
            - Apply ppgen markup as needed to make chapter headings look like original
    - Manual method ------------------------------
        - Find Chapter headings (4 blank lines (text) 2 blank lines) FIXME (first search/replace need to be fixed.. only will work with one line chapter string)
          search for  : ^\r\n\r\n\r\n\r\n(.*)$\r\n\r\n\r\n
          replace with: \r\n.sp 4\r\n.h2 id=CHANGEME\r\n\1\r\n.sp 2\r\n\r\n
        - Find Chapter headings with chapter summaries (4 blank lines (text))
          search for  : ^\r\n\r\n\r\n\r\n(.*)$
          replace with: \r\n.sp 4\r\n.h2 id=CHANGEME\r\n\1\r\n.sp 2
        - Set heading IDs
          search for  : CHANGEME
          replace with: chapter_i (take heading text, convert to lowercase and replace spaces with _)
git commit -am "Markup chapter headings"


- Markup section headings
    - dp2ppgen method ------------------------------
        - TBD.. detection routine is basically useless in dp2ppgen, format manually for now. Might be able to automate section_id naming after sections are marked with CHANGEME
    - Manual method ------------------------------
        - Find section headings (2 blank lines (text) 1 blank line) (will get lots of false hits)
          search for  : ^\r\n\r\n(.*)$
          replace with: \r\n.sp 2\r\n.h3 id=CHANGEME\r\n\1\r\n.sp 1
            or
          manually replace with:
            .sp 2
            .h3 id=section_id
            Section Name
            .sp 1
        - Find Chapter headings with chapter summaries (4 blank lines (text))
          search for  : ^\r\n\r\n\r\n\r\n(.*)$
          replace with: \r\n.sp 4\r\n.h2 id=CHANGEME\r\n\1\r\n.sp 2
        - Set heading IDs
          search for  : CHANGEME
          replace with: section_i_1 (example for first section of Chapter I)
git commit -am "Markup section headings"


- Replace [Illustration tags with ppgen markup
    - PPimg method ------------------------------
        - ppimg book-src.txt -i
git commit -am "Replace [Illustration markup with ppgen .il statements"


- Process footnotes
    - dp2ppgen method ------------------------------
        - Call dp2ppgen with the desired footnote "landing zone"
            - dp2ppgen book-src.txt -f --fndest=paragraphend
            - dp2ppgen book-src.txt -f --fndest=chapterend
            - dp2ppgen book-src.txt -f --fndest=bookend
    - Manual method ------------------------------
        - Reindex footnotes from [A]..[B].. to [1]..[2]..
            search for  : \[[\d\w]\]
            replace with: [N] 1..
        - Replace [Footnote:] markup
            .fm
            .fn 1
            See Bill Bolton and The Winged Cartwheels.
            .fn-
        - Relocate footnote markup to .. end of paragraph, end of page, end of chapter, end of book?
    - add to transcribers note
	Footnotes have been renumbered and moved to the end of the book.
git commit -am "Process footnotes"


- Process sidenotes
    - dp2ppgen book-src.txt -s
git commit -am "Process sidenotes"


- Rejoin hyphenated words that span two pages
    search for: \-\*\r\n//
    - dp2ppgen book-src.txt -j
    - search for: -**
    - replace with '' or '-' as needed
git commit -am "Rejoin hyphenated words that span over page breaks"


- Resolve hyphenation issues
  search for: -*
  search for: *-
git commit -am "Resolve hyphenation issues flagged during proofing rounds"


- Cut and paste ppgen boilerplate header and footer into document
    - See boilerplate.txt
    - Update .dt title and author
    - Activate/remove boilerplate statements as needed
git commit -am "Add boilerplate code"


- Start a transcriber's note based on corrections made to text
	- Copy template from boilerplate.txt to end of ppgen source file
	- If desired, copy template for Italics/bold/Superscript warning for text version up front (customize based on what styles are actually used in text)
git commit -am "Create Transcriber's Note"


- Markup title page and front matter
    - .h1
      THIS|<s>is</s>|Three lines
    - Enclose all but h1 in .nf .nf- block (no wrap)
    - Try to make title page ~600px high so that it is contained in a single page on ereader
git commit -am "Markup front matter"

- Markup Table of Contents and Table of Illustrations
    - If no TOC or TOI was included (magazines sometimes like this) then think about maybe adding one?
	- Add TN at top: For convenience, a Table of Contents and List of Illustrations have been added to this version.
	- Not so useful in epub/mobi (TOC at least) since one is autogenerated from h2 etc headings.
    - Markup table
    .ta rlr
    Style 1: IV <sc>Chapter Four</sc>      323
	search for  : (\w+) \<sc\>(.+)\<\/sc\>\s+(\d+)
	replace with: \1|<sc>\2</sc>|#\3#
    - Page links
	search for  : \|([0-9]*)$
	replace with: |#\1#
	or
	replace with: |#\1:chapter_i#
    Style 2: Section     123
	search for  : \s{5,}(\d+)
	replace with: |#\1#
git commit -am "Markup TOC"


- Markup sections marked with out-of-line formatting /* */ /# #/ such as tables, poetry, block quotes..
    search for  : (\/\#|\/\*)
    replace with:
        - poetry (.nf b ... .nf-)
        - tables (.ta lr ... .ta-)
	  - custom html
	      rst2html
	      page-break-inside: avoid;
        - blockquote (.in 4 .ll -4 ... .ll .in)
        TBD...
git commit -am "Markup out-of-line formatting"


- Process inline formatting <i> tags
    - verify that usage is correct and consistent
    - change <i> where appropriate
	- <em> </em> is used when a word is italic for emphasis in the text.
	- <cite> </cite> is used when a reference is cited. The New York Times, Washington Irving, etc.
	- <i lang="fr" xml:lang="fr">Bonjour</i> is used to indicate a language other than the original's in the text. Explained in more detail here: http://www.pgdp.org/~jana/best-practices/pages/case-studies/inline-formatting/
	  or (PPGen recommended way)
	- <i><lang="fr"> </lang></i> is used to indicate a language other than the original's in the text. ("Bonjour, m'ami!" he shouted.)
	- keep <i> when used for decorative purpose (like chapter headings)
    - useful regex
	search for  : (?Ums)<i>(.+)</i>
	replace with: <em>\1</em>
git commit -am "Process <i> markup"

- Process inline formatting <b>, <sc> tags
    - useful regex
	search for  : (?Uims)<(b|sc)>(.+)</(b|sc)>
    - verify that usage is correct and consistent
    - apply <SC></SC> to first word(s) of chapter If book uses that style
    - Use alternate <B> and <SC> tags when you want effect only in HTML version (first word of chapter is a good candidate for this). The text verison will not have _italics_ =BOLD= SMALLCAPS changes. Warning: "removing markup" is consided an error during PPV.. have a good reason to use.
git commit -am "Process <b>, <sc> markup"


- Markup index
    - Enclose in:
	    .na
	    .in 2
	    .nf l
	       ....
	       ....
	    .nf-
	    .in
	    .ad
    - Set up index links
	search for  : (\d+)
	replace with: #\1# (in selection)
    - Revert back lines that should not have been changed (TODO.. make regex above ignore lines that match these)
	// xxx.png
	// .pn +1
	a group of 123,245 people
git commit -am "Markup index"



- Paragraph indent
    .nr psi 0.5em
    .pi

- Add Drop caps
    .dc 0.4 0.4
    <SC>How</SC>
	search for  : .sp 2\n\n\n(\w+)
	replace with: .sp 2\n\n\n.dc 0.4 0.4\n<SC>\1</SC>

- Second pass on illustrations
    - Relocate *[Illustrations or other .il statements that do not fall on a paragraph break
    - for each .il statement set align= parameter as needed
    - scale illustrations
	- view project in browser at 800px wide
	- for each .il statement set w= to approximate image width in percent based on page scans (grid overlay on page scans can be useful for more exact measure)
	    - build html, inspect result, repeat until satisfied
git commit -am "Relocate illustrations to paragraph breaks, set align and w parameters"

- Final pass on illustrations
TODO: ppimg process needs to be better
    - move w= to ew=
	- ppimg -w book-src.txt
    - rescale images/
	- ppimg --calcimagewidths --maxwidth=800 book-src.txt
	- make
	- ppimg -w book-src.txt
git commit -am "Final pass of illustrations, calculate and set ew parameter"

Extras
----------------------------------------------------------------------
- Link advertisements to actual titles on PG (should they exist)
- Link footnote references to actual titles on PG (should they exist)
- Pull out extra illustrations that were not included in _images.zip if (like decorative borders, hr's, decorative fonts..)
- Add internal references (when appropriate)
    - Change all references to pages/figures into hyperlinks
    - search for  :  p\. (\d+)
    - replace with:  p.\ #\1#
    - search for  : Fig. (\w+)
    - replace with:  Fig. #\1#



Error checks
-----------
- Run "make errorcheck" which performs the following checks
    - bookloupe (gutcheck with UTF-8 support)
	- bookloupe book.txt --typo
    - jeebies
	- jeebies book.txt
    - pptxt
	- pptxt -i book.txt -o results.txt -l
    - ppspell
	- ppspell -i book.txt -o ppspell-results.txt -g originals/good_words.txt
    - pphtml
	- pphtml -i book.html -o pphtml-results.txt

- guiguts check
    - http://www.pgdp.net/wiki/User:Miller#Jeebies
git commit -am "Correct issues found in errorcheck"


Final processing / verification
----------------------------------------------------------------------
- Diff F2 / text-lat1
    - Use pptools (http://pptools-pptools.rhcloud.com/)
	- comp_pp originals/projectIDXXX.txt book-lat1.txt
- Diff text-utf8 / HTML
    - Use pptools: http://pptools-pptools.rhcloud.com/
	- comp_pp book-utf8.txt	book.html
- Diff text-lat1 / text-utf8
    - Use pptools: http://pptools-pptools.rhcloud.com/
	- comp_pp book-lat1.txt	book-utf8.txt
- Extra checks
    - kppvh book.html
    - kppvh book-utf8.txt
- Verify line breaks in text version are windows format
- Optimize images (jpegoptim, cjpeg, optipng, pngquant)

- Clean up HTML
	- pphtml -i a_rational_wages_system.html -o pphtml.log
	- Remove unused CSS
		- CSS Usage addon for firebug,
		  - Tools->Web Developer->FireBug
		  - CSS Usage->Scan
		  - Remove red entries
		- sudo packer -Ss nodejs-uncss
		  uncss file.html > stylesused.css

- Validate HTML (http://www.asylumcs.net/pplink.php can do all tests below)
	- HTML tidy
		- tidy -f errs.txt -q file.html
	- Validate HTML - http://validator.w3.org/
	- Validate CSS - http://jigsaw.w3.org/css-validator/
	- Validate Links - http://validator.w3.org/checklink
	- pptools - http://pptools-pptools.rhcloud.com/ (https://github.com/bibimbop/pptools-openshift)
	- Ensure the HTML header title contains the line <title>The Project Gutenberg eBook of Name of Book, by Name of Author</title>

- Validate ePUB - http://epubmaker.pglaf.org/

- Scan over text versions for any issues
git commit -am "Correct issues found in validation"


Testing
----------------------------------------------------------------------
- Test HTML version on different browsers
- Test EPUB on different readers
    - Desktop
	- ADE http://www.adobe.com/products/digital-editions/download.html
	- Kindle Previewer http://www.amazon.com/gp/feature.html/?docId=1000765261
	- EPUBReader Plugin for FireFox http://www.epubread.com/en/
    - Mobile
	- Use DropBox for easy transfer to Android/iPad
	- Readers
	- Load on Nook, Kindle etc.. (if available)
git commit -am "Correct issues found in testing"

- Submit for Smooth Reading (Include links to HTML,EPUB,Kindle in SR note)
git commit -am "Correct issues found in SR round"




